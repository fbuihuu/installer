#!/usr/bin/python
# -*- coding: utf-8 -*-
#

import os
import sys
import locale
import logging
import gettext
import argparse

from installer import l10n
from installer import get_version
from installer.ui import urwid, cmdline
from installer.settings import settings, load_config_file, SettingsError
from installer.utils import die


def parse_cmdline():
    """Parses the relevant cmdline arguments"""

    parser = argparse.ArgumentParser(description="An easy way to install your favorite distribution")
    parser.add_argument("-c", "--config",
                        metavar='FILE',
                        type=argparse.FileType('r'),
                        help="specify a configuration file")
    parser.add_argument("--frontend",
                        choices=['cmdline', 'urwid'],
                        help="force the frontend to use"),
    parser.add_argument("--skip",
                        dest="skipped_steps",
                        metavar="STEP",
                        nargs="+",
                        help="don't proceed the specified step(s)")
    parser.add_argument("--no-skip",
                        dest="forced_steps",
                        metavar="STEP",
                        nargs="+",
                        help="don't skip the specified step(s)")
    parser.add_argument("--log",
                        dest="logfile",
                        metavar='FILE',
                        help="specify the log file")
    parser.add_argument("--firmware",
                        dest="firmware",
                        choices=['uefi', 'bios'],
                        nargs="+",
                        help="force installation for a uefi and/or bios system")
    parser.add_argument("--no-hostonly",
                        dest="hostonly",
                        action="store_false",
                        help="do a generic installation")
    parser.add_argument("--version",
                        action='version',
                        version=get_version())

    cmdline.parse_cmdline(parser)
    urwid.parse_cmdline(parser)

    return parser.parse_args()


def main():
    args = parse_cmdline()

    #
    # Config file must be valid if specified by the user. If not
    # set, we don't really care.
    #
    if not args.config:
        try:
            args.config = open('/etc/installer/installer.conf', 'r')
        except IOError:
            args.config = None

    if args.config:
        load_config_file(args.config)

    #
    # Setting up the default logging facility: it uses a log file. If
    # the user wants to disable this he can pass '--log=/dev/null'.
    #
    # Each frontend can add additional handlers to meet its specific
    # needs.
    #
    if args.logfile:
        settings.Options.logfile = args.logfile
    logfile = settings.Options.logfile

    logging.basicConfig(format='%(asctime)s %(levelname)-8s %(name)-12s  %(message)s',
                        datefmt='%H:%M:%S',
                        filename=logfile, filemode='w',
                        level=logging.DEBUG)

    #
    # frontend selection
    #
    frontend = settings.get('Options', 'frontend')
    if args.frontend:
        frontend = args.frontend

    # if the user didn't specify one, choose one for him.
    if not frontend:
        if args.disks:
            frontend = 'cmdline'
        elif not sys.stdout.isatty():
            frontend = 'cmdline'
        else:
            frontend = 'urwid'

    if frontend != 'cmdline' and args.disks:
        die("you must select 'cmdline' frontend when specifying disk(s)")

    settings.set('Options', 'frontend', frontend)

    #
    # Set hostonly mode (default being True).
    #
    if not args.hostonly:
        settings.Options.hostonly = False

    #
    # Set firmware.
    #
    if args.firmware:
        settings.Options.firmware = args.firmware

    #
    # Disable steps
    #
    if args.skipped_steps:
        for s in args.skipped_steps:
            settings.set('Steps', s, False)
    if args.forced_steps:
        for s in args.forced_steps:
            settings.set('Steps', s, True)

    #
    # Start the frontend interface.
    #
    try:
        if frontend == 'cmdline':
            ui = cmdline.CommandLineUI(args)
        elif frontend == 'urwid':
            ui = urwid.UrwidUI(args)
        else:
            raise NotImplementedError()
    except SettingsError as e:
        die(e)

    ui.language = settings.I18n.locale
    return ui.run()


if __name__ == "__main__":
    sys.exit(main())
