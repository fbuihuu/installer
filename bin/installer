#!/usr/bin/python
# -*- coding: utf-8 -*-
#

import os
import sys
import locale
import logging
import gettext
import argparse

from installer import l10n
from installer import get_version
from installer.ui.urwid import UrwidUI
from installer.settings import settings, load_config_file
from installer.utils import die


CONFIG_FILE='/etc/installer/installer.conf'


def parse_cmdline():
    """Parses the relevant cmdline arguments"""

    parser = argparse.ArgumentParser(description="An easy way to install your favorite distribution")
    parser.add_argument("-c", "--config",
                        metavar='file',
                        help="specify a configuration file")
    parser.add_argument("--skip",
                        dest="skipped_steps",
                        nargs="+",
                        help="don't proceed the specified step(s)")
    parser.add_argument("--no-skip",
                        dest="forced_steps",
                        nargs="+",
                        help="don't skip the specified step(s)")
    parser.add_argument("--log",
                        dest="logfile",
                        metavar='file',
                        help="specify the log file")
    parser.add_argument("--firmware",
                        dest="firmware",
                        choices=['uefi', 'bios'],
                        nargs="+",
                        help="force installation for a uefi and/or bios system")
    parser.add_argument("--no-hostonly",
                        dest="hostonly",
                        action="store_false",
                        help="do a generic installation")
    parser.add_argument("--version",
                        action='version',
                        version=get_version())

    return parser.parse_args()


def main():
    locale.resetlocale()
    lang, enc = locale.getlocale()
    l10n.set_translation(lang)

    args = parse_cmdline()

    #
    # Config file must be valid if specified by the user. If not
    # specified, it doesn't matter anymore if it exists or not
    #
    if args.config:
        if not os.path.exists(args.config):
            die("Can't find config file")
        config_file = args.config
    else:
        config_file = CONFIG_FILE
    load_config_file(config_file)

    #
    # Setting up the default logging facility: it uses a log file. If
    # the user wants to disable this he can pass '--log=/dev/null'.
    #
    # Each frontend can add additional handlers to meet its specific
    # needs.
    #
    if args.logfile:
        settings.Options.logfile = args.logfile
    logfile = settings.Options.logfile

    logging.basicConfig(format='%(asctime)s %(levelname)-8s %(name)-12s  %(message)s',
                        datefmt='%H:%M:%S',
                        filename=logfile, filemode='w',
                        level=logging.DEBUG)

    #
    # Set hostonly mode.
    #
    settings.Options.hostonly = args.hostonly

    #
    # Set firmware.
    #
    if args.firmware:
        settings.Options.firmware = args.firmware

    #
    # Disable steps
    #
    if args.skipped_steps:
        for s in args.skipped_steps:
            settings.set('Steps', s, False)
    if args.forced_steps:
        for s in args.forced_steps:
            settings.set('Steps', s, True)

    #
    # Start the frontend interface.
    #
    ui = UrwidUI(lang)
    ui.run()


if __name__ == "__main__":
    main()
